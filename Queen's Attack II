import java.util.*;

public class Solution {

    public static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles) {
        // Map to store the nearest obstacle in each direction
        Map<String, Integer> directions = new HashMap<String, Integer>();

        // Initialize max possible moves in each of the 8 directions
        directions.put("N", n - r_q);
        directions.put("S", r_q - 1);
        directions.put("E", n - c_q);
        directions.put("W", c_q - 1);
        directions.put("NE", Math.min(n - r_q, n - c_q));
        directions.put("NW", Math.min(n - r_q, c_q - 1));
        directions.put("SE", Math.min(r_q - 1, n - c_q));
        directions.put("SW", Math.min(r_q - 1, c_q - 1));

        for (int i = 0; i < k; i++) {
            int r_o = obstacles[i][0];
            int c_o = obstacles[i][1];

            if (c_o == c_q) {
                if (r_o > r_q) {
                    // North
                    directions.put("N", Math.min(directions.get("N"), r_o - r_q - 1));
                } else {
                    // South
                    directions.put("S", Math.min(directions.get("S"), r_q - r_o - 1));
                }
            } else if (r_o == r_q) {
                if (c_o > c_q) {
                    // East
                    directions.put("E", Math.min(directions.get("E"), c_o - c_q - 1));
                } else {
                    // West
                    directions.put("W", Math.min(directions.get("W"), c_q - c_o - 1));
                }
            } else if (Math.abs(r_o - r_q) == Math.abs(c_o - c_q)) {
                if (r_o > r_q && c_o > c_q) {
                    // North-East
                    directions.put("NE", Math.min(directions.get("NE"), r_o - r_q - 1));
                } else if (r_o > r_q && c_o < c_q) {
                    // North-West
                    directions.put("NW", Math.min(directions.get("NW"), r_o - r_q - 1));
                } else if (r_o < r_q && c_o > c_q) {
                    // South-East
                    directions.put("SE", Math.min(directions.get("SE"), r_q - r_o - 1));
                } else if (r_o < r_q && c_o < c_q) {
                    // South-West
                    directions.put("SW", Math.min(directions.get("SW"), r_q - r_o - 1));
                }
            }
        }

        int total = 0;
        for (Integer moves : directions.values()) {
            total += moves;
        }
        return total;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt(); // board size
        int k = in.nextInt(); // number of obstacles
        int r_q = in.nextInt(); // queen row
        int c_q = in.nextInt(); // queen column

        int[][] obstacles = new int[k][2];
        for (int i = 0; i < k; i++) {
            obstacles[i][0] = in.nextInt();
            obstacles[i][1] = in.nextInt();
        }

        int result = queensAttack(n, k, r_q, c_q, obstacles);
        System.out.println(result);
    }
}
