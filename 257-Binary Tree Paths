import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if (root != null) {
            dfs(root, new StringBuilder(), paths);
        }
        return paths;
    }

    private void dfs(TreeNode node, StringBuilder path, List<String> paths) {
        if (node == null) return;

        int length = path.length();
        path.append(node.val);

        if (node.left == null && node.right == null) {
            // Current node is a leaf
            paths.add(path.toString());
        } else {
            path.append("->");
            dfs(node.left, path, paths);
            dfs(node.right, path, paths);
        }

        // Backtrack to previous state
        path.setLength(length);
    }
}
