import java.util.*;

public class Solution {

    // Generate first q prime numbers
    static List<Integer> generatePrimes(int q) {
        List<Integer> primes = new ArrayList<>();
        int num = 2;
        while (primes.size() < q) {
            boolean isPrime = true;
            for (int i = 2; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) primes.add(num);
            num++;
        }
        return primes;
    }

    public static List<Integer> waiter(List<Integer> number, int q) {
        List<Integer> result = new ArrayList<>();
        List<Integer> primes = generatePrimes(q);

        Stack<Integer> current = new Stack<>();
        for (int i = number.size() - 1; i >= 0; i--) {
            current.push(number.get(i));
        }

        for (int i = 0; i < q; i++) {
            Stack<Integer> next = new Stack<>();
            Stack<Integer> b = new Stack<>();
            int prime = primes.get(i);

            while (!current.isEmpty()) {
                int plate = current.pop();
                if (plate % prime == 0) {
                    b.push(plate); // divisible goes to B_i
                } else {
                    next.push(plate); // non-divisible stays in A_i
                }
            }

            while (!b.isEmpty()) {
                result.add(b.pop()); // output B_i (top to bottom)
            }

            current = next; // proceed with remaining for next round
        }

        // After q rounds, output what's left in A_q
        while (!current.isEmpty()) {
            result.add(current.pop());
        }

        return result;
    }

    // For HackerRank: print list directly
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();

        List<Integer> number = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            number.add(sc.nextInt());
        }

        List<Integer> result = waiter(number, q);
        for (int num : result) {
            System.out.println(num);
        }
    }
}
