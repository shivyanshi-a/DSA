import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {

    public static long countSubsequences(int[] arr, int k) {
        int n = arr.length;
        long[] modCount = new long[k];
        long prefixSum = 0;
        long count = 0;

        modCount[0] = 1; // for prefix sum % k == 0 at the beginning

        for (int i = 0; i < n; i++) {
            prefixSum += arr[i];
            int mod = (int)(prefixSum % k);

            // To handle negative mods
            if (mod < 0) {
                mod += k;
            }

            count += modCount[mod];
            modCount[mod]++;
        }

        return count;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int T = Integer.parseInt(br.readLine());

        while (T-- > 0) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());

            int[] arr = new int[n];
            st = new StringTokenizer(br.readLine());

            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(st.nextToken());
            }

            System.out.println(countSubsequences(arr, k));
        }
    }
}
